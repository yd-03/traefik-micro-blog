version: "3.9"
services:
  user-service:
    build: ./user-service
    ports:
      - "5001:5000"
    networks:
      - backend
    environment:
      - SQLALCHEMY_DATABASE_URI=${SQLALCHEMY_DATABASE_URI}
    depends_on:
      - db

  post-service:
    build: ./post-service
    ports:
      - "5002:5000"
    networks:
      - backend
    depends_on:
      - db
    environment:
      - SQLALCHEMY_DATABASE_URI=${SQLALCHEMY_DATABASE_URI}

  comment-service:
    build: ./comment-service
    ports:
      - "5003:5000"
    networks:
      - backend
    depends_on:
      - db
    environment:
      - SQLALCHEMY_DATABASE_URI=${SQLALCHEMY_DATABASE_URI}

  search-service:
    build: ./search-service
    ports:
      - "5004:5000"
    networks:
      - backend
    depends_on:
      - elasticsearch

  db:
    image: postgres:13
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    networks:
      - backend
    volumes:
      - db-data:/var/lib/postgresql/data
      - ./db_init.sql:/docker-entrypoint-initdb.d/db_init.sql
    ports:
      - "5432:5432"
    command: ["postgres", "-c", "fsync=off"]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.13.4
    environment:
      - discovery.type=single-node
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      - backend

  traefik:
    image: traefik:v2.4
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--entrypoints.web.address=:80"
    ports:
      - "80:80"
      - "8080:8080"
    networks:
      - backend
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

volumes:
  db-data:

networks:
  backend:
    driver: bridge
